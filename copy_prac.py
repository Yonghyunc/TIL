# 1. 할당 : 두 변수가 같은 값을 공유

a = [1, 2, 3]
b = a
print(a, b)  # [1, 2, 3] [1, 2, 3]

b[0] = 4
print(a, b)  # [4, 2, 3] [4, 2, 3]

# -----------------------

a = "hello"
b = a
a += "python"
print(a, b)  # hellopython hello

# 문자열은 immutable --> 즉, a는 새로운 변수로 할당


## mutable --> 같은 값에 포스트잇을 붙인 두 변수는 함께 바뀜
## immutable --> 값이 바뀌지 않으므로 두 변수가 달라짐


# -----------------------------------

# 2. 얕은 복사 : a와 b를 다르게 하고 싶은데

a = [1, 2, 3]
b = a[:]  # 슬라이싱 처음과 끝 생략 가능

# a와 똑같이 생긴 리스트 복사 후 b에 할당

b[0] = 4
print(a, b)  # [1, 2, 3] [4, 2, 3]

# 다른 방법
b = list(a)

# 문제점 : 2차원 리스트인 경우, 결과가 달라짐
a = [1, 2, [5, 6]]
b = a[:]
print(a, b)  # [1, 2, [5, 6]] [1, 2, [5, 6]]

a[2][0] = 7
print(a, b)  # [1, 2, [7, 6]] [1, 2, [7, 6]]
# 복사를 했는데 함께 바뀌어 있음
# 내부 리스트는 같은 곳을 보고 있음 (복사가 안됨)


# ---------------------------------------
## 오류 : partially initialized module 'copy' has no attribute 'deepcopy' (most likely due to a circular import)
## --> 파일명과 불러오려는 모듈명이 같으면 발생하는 오류


# 3. 깊은 복사
import copy

a = [1, 2, [5, 6]]
b = copy.deepcopy(a)
print(a, b)  # [1, 2, [5, 6]] [1, 2, [5, 6]]

a[2][0] = 7
print(a, b)  # [1, 2, [7, 6]] [1, 2, [5, 6]]

# ---------------------

a = [[0] * 3] * 3
a[0][0] = 1
print(a)  # [[1, 0, 0], [1, 0, 0], [1, 0, 0]]

print(id(a[0]))  # 2090134809472
print(id(a[1]))  # 2090134809472
print(id(a[2]))  # 2090134809472

a = [[0] * 3 for i in range(3)]  # int는 immutable 이기 때문에 곱셈 사용 가능
print(a)  # [[0, 0, 0], [0, 0, 0], [0, 0, 0]]
a[0][0] = 1
print(a)  # [[1, 0, 0], [0, 0, 0], [0, 0, 0]]
